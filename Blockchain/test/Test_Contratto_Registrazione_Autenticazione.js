// Import delle dipendenze necessarie per i test
const {
    loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const { ethers } = require("hardhat");

// Descrive il set di test per il contratto "Contratto_Registazione_Autenticazione"
describe("Contratto_Registrazione_Autenticazione", function () {

    // Funzione asincrona per il deployment del contratto
    async function deployContract() {
        // I contratti vengono deployati utilizzando il primo account di default
        const [owner, otherAccount] = await ethers.getSigners();

        // Ottieni il factory del contratto
        const Contratto_Registazione_Autenticazione = await ethers.getContractFactory("Contratto_Registrazione_Autenticazione");
        // Deploy del contratto
        const CRA = await Contratto_Registazione_Autenticazione.deploy();

        return { CRA, owner, otherAccount };
    }

    // Set di test per il deployment del contratto
    describe("Deployment", function () {
        it("Deploy del contratto", async function () {
            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);
            // Verifica che l'indirizzo del contratto non sia 0 (quindi è stato deployato correttamente)
            expect(CRA.address).to.not.equal(0);
        });
    });

    // Set di test per la registrazione di un dispositivo IoT
    describe("Registrazione dispositivo", function () {

        it("Campo id vuoto", async function () {
            // Input di esempio
            const id = "";
            const CID = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperData = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registrazione dispositivo con id vuoto
            await expect( CRA.registrazioneDispositivoIoT(id, CID, helperData)).to.be.revertedWith("Il campo id non puo' essere vuoto");
        
        });

        it("Campo CID vuoto", async function () {
            // Input di esempio
            const id = "aabbccdd";
            const CID = "";
            const helperData = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registrazione dispositivo con id vuoto
            await expect( CRA.registrazioneDispositivoIoT(id, CID, helperData)).to.be.revertedWith("Il campo CID non puo' essere vuoto");
        
        });

        it("Campo helper data vuoto", async function () {
            // Input di esempio
            const id = "aabbccdd";
            const CID = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperData = "";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registrazione dispositivo con id vuoto
            await expect( CRA.registrazioneDispositivoIoT(id, CID, helperData)).to.be.revertedWith("Il campo helperData non puo' essere vuoto");
        
        });

        it("Registrazione nuovo dispositivo", async function () {
            // Input di esempio
            const id = "aabbccdd";
            const CID = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperData = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Riferimento aspettato dal dispositivo registrato
            const riferimentoAspettato = "0x4c0732e2e50d3a90293aacf3367e2128450b991abf1d7c50804dd47851afbc04"

            // Verifica che l'evento di registrazione sia emesso correttamente
            await expect(CRA.registrazioneDispositivoIoT(id, CID, helperData))
                .to.emit(CRA, "RegistrazioneDispositivoIoTEvent").withArgs(riferimentoAspettato);
        });

        it("Dispositivo già registrato", async function () {
            // Input di esempio
            const id = "aabbccdd";
            const CID = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperData = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registrazione di un dispositivo
            await CRA.registrazioneDispositivoIoT(id, CID, helperData);

            // Verifica che la registrazione di un dispositivo già registrato venga rifiutata
            await expect(CRA.registrazioneDispositivoIoT(id, CID, helperData)).to.be.revertedWith("Dispositivo registrato precedentemente.");
        });
    });

    // Set di test per ottenere informazioni su un dispositivo IoT
    describe("Informazioni dispositivo", function () {
        it("Dispositivo non registrato", async function () {
            // Riferimento di un dispositivo non registrato
            const id = "12f"

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Verifica che ottenere informazioni su un dispositivo non registrato restituisca un errore
            await expect(CRA.getInfoDispositivoIoT(id)).to.be.revertedWith("Dispositivo non registrato!");
        });

        it("Dispositivo esiste", async function () {
            // Input di esempio
            const id = "aabbccdd";
            const CID = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperData = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra un dispositivo
            await CRA.registrazioneDispositivoIoT(id, CID, helperData);

            // Ottiene informazioni sul dispositivo e verifica che siano corrette
            const result = await CRA.getInfoDispositivoIoT(id);

            // Verifica che i valori ottenuti siano quelli corretti
            expect(result[0]).to.equal(id);
            expect(result[1]).to.equal(CID);
            expect(result[2]).to.equal(helperData);
        });
    });

    describe("Get CIDs dispositivi", function() {

        it("Dispositivo A non registrato", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqB";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Ottiene informazioni sui CIDs e verifica che siano corrette
            await expect(CRA.getCIDs(idA, idB)).to.be.revertedWith("Dispositivo A non registrato!");
        });

        it("Dispositivo B non registrato", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);

            // Ottiene informazioni sui CIDs e verifica che siano corrette
            await expect(CRA.getCIDs(idA, idB)).to.be.revertedWith("Dispositivo B non registrato!");
        });

        it("Dispositivo esiste", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Ottiene informazioni sui CIDs e verifica che siano corrette
            const result = await CRA.getCIDs(idA, idB);

            // Verifica che i valori ottenuti siano quelli corretti
            expect(result[0]).to.equal(CIDA);
            expect(result[1]).to.equal(CIDB);
        });
    });

    describe("Avvia autenticazione (operazione fatta dal server B)", function() {

        it("Dispositivo non registrato", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni del server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Verifica che l'autenticazione dia un errore
            await expect(CRA.avviaAutenticazione("", riferimentoAutenticazione, addressB, NInitA, NSA, NSB)).to.be.revertedWith("Dispositivo non registrato precedentemente!"); 

        });

        it("Autenticazione gia' avviata", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni del server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";
            
            CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);
            // Verifica che l'autenticazione dia un errore
            await expect(CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB)).to.be.revertedWith("Autenticazione gia avviata con questo dispositivo."); 

        });

        it("Indirizzo server vuoto", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni del server
            const addressB ="";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Verifica che l'autenticazione dia un errore
            await expect(CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB)).to.be.revertedWith("L'indirizzo non puo' essere vuoto"); 

        });

        it("NinitA vuoto", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Verifica che l'autenticazione dia un errore
            await expect(CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB)).to.be.revertedWith("Il campo NInitA non puo' essere vuoto"); 

        });

        it("NSA vuoto", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4"; 
            // Verifica che l'autenticazione dia un errore
            await expect(CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB)).to.be.revertedWith("Il campo NSA non puo' essere vuoto"); 

        });

        it("NSB vuoto", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Verifica che l'autenticazione dia errore
            await expect(CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB)).to.be.revertedWith("Il campo NSB non puo' essere vuoto"); 

        });

        it("Avvio autenticazione corretto", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";
            // Riferimento aspettato dal dispositivo registrato
            const riferimentoAspettato = "0x528daeda4cc8a3a849b044e52ef76a453d3b824e5802fc77a5309a603d762129"

            // Verifica che l'autenticazione vada a buon fine e quindi sia emesso l'evento correttamente
            await expect(CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB))
                .to.emit(CRA, "avviaAutenticazioneEvent").withArgs(riferimentoAspettato);

        });
    });

    describe("Ottieni dati autenticazione (operazione fatta dal server A)", function() {

        it("Dispositivo non registrato", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Verifica che l'ottenimento dei dati dell'autenticazione dia errore
            await expect(CRA.ottieniDatiAutenticazione("", riferimentoAutenticazione)).to.be.revertedWith("Dispositivo non registrato precedentemente.");
        });

        it("Autenticazione non avviata", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Verifica che l'ottenimento dei dati dia errore
            await expect(CRA.ottieniDatiAutenticazione(idA, riferimentoAutenticazione)).to.be.revertedWith("Autenticazione non avviata.");
        });

        it("Ottieni dati autenticazione", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo A
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Verifica che l'autenticazione vada a buon fine e quindi sia emesso l'evento correttamente
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Ottiene i dati dell'autenticazione
            const result = await CRA.ottieniDatiAutenticazione(idA, riferimentoAutenticazione);
            // Verifica che i valori ottenuti siano quelli corretti
            expect(result[0]).to.equal(addressB);
            expect(result[1]).to.equal(NInitA);
            expect(result[2]).to.equal(NSA);
            expect(result[3]).to.equal(NSB);
            expect(result[4]).to.equal(CIDA);
        });
    });

    describe("Completa autenticazione server", function() {

        it("Dispositivo non registrato", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";
            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Verifica che il completamento dell'autenticazione dia errore
            await expect(CRA.completaAutenticazioneServer("", riferimentoAutenticazione, true)).to.be.revertedWith("Dispositivo non registrato precedentemente."); 
            
        });

        it("Autenticazione non avviata", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Verifica che il completamento dell'autenticazione dia errore
            await expect(CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, true)).to.be.revertedWith("Autenticazione non avviata."); 
            
        });

        it("Conferma autenticazione server B", async function () {
            // Input di esempio
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Verifica che il completamento dell'autenticazione vada a buon fine e sia emesso l'evento
            await expect(CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, true))
                .to.emit(CRA, "confermaAutenticazione").withArgs("Dispositivo B ha confermato l'autenticazione");
        });

        it("Conferma autenticazione server A", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Verifica che il completamento dell'autenticazione vada a buon fine e sia emesso l'evento
            await expect(CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, false))
                .to.emit(CRA, "confermaAutenticazione").withArgs("Dispositivo A ha confermato l'autenticazione");
        });

        it("Server B ha già confermato l'autenticazione", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            
            CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, true);

            await expect(CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, true)).to.be.revertedWith("Il dispositivo B ha gia' confermato l'autenticazione!"); 

        });

        it("Server A ha già confermato l'autenticazione", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            
            CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, false);

            await expect(CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, false)).to.be.revertedWith("Il dispositivo A ha gia' confermato l'autenticazione!"); 

        });

    });

    describe("Autenticazione server", function() {

        it("Dispositivo non registrato", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazione server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Completamento autenticazione genera errore
            await expect(CRA.autenticazioneStabilita("",riferimentoAutenticazione)).to.be.revertedWith("Dispositivo non registrato precedentemente."); 

        });

        it("Autenticazione non avviata", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Completamento autenticazione genera errire
            await expect(CRA.autenticazioneStabilita(idA, riferimentoAutenticazione)).to.be.revertedWith("Autenticazione non avviata."); 

        });

        it("Autenticazione confermata solo dal server B", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Completamento autenticazione
            await CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, true);

            // Controllo dell'autenticazione
            const result = await CRA.autenticazioneStabilita(idA, riferimentoAutenticazione);

            expect(result).to.equal(false);
        });

        it("Autenticazione confermata solo dal server A", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Completamento autenticazione
            await CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, false);

            // Controllo dell'autenticazione
            const result= await CRA.autenticazioneStabilita(idA, riferimentoAutenticazione);

            expect(result).to.equal(false);
        });

        it("Autenticazione confermata", async function () {
            // Input di esempio dispositivo A
            const idA = "aabbccdd";
            const CIDA = "QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqA";
            const helperDataA = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Input di esempio dispositivo B
            const idB = "ddccbbaa";
            const CIDB = "b45165ed3cd437b9ffad02a2aad22a4ddc69162470e2622982889ce5826f6e33";
            const helperDataB = "1EA2EF05C8544AC73084B9700FBFD4DE2817637F0DBAAEA9F134472F7A990C2A77712DB04BACD7505005961BEF9FF06522AA8444B5CDD529B847041025399975E10F868EC182BCA837604E6AC4F520D53BE05D518DADD56D513F564CE4ACA0A77C35351404C6D694CC22710ABDB04CAA417AC84C3A909AA0F37146C0CE02569B9EEFE296294DEB08613983F5F3133D3A67D05C6F0F16B4D7210646EF1613B35726D89204548344B7AF874094D894C02269430CCDCF88857EAEB988C90E601047EBFC8303F21AAA0377750F7F0E49D1F24B8968C2A544EC5BFA855B6F05CEAD712D852ED3CF1CDB080CF334CEC33CD41F7217B7B48748D698FD306BDECE0596E95C09F7E9DEB900884A2A4FEFFB6718005484ABB26CAA99D55554E2784CB841B93A5BDD456CCF23722D21E8B1EDD69701";

            // Deploy del contratto tramite la fixture
            const {CRA} = await loadFixture(deployContract);

            // Registra dispositivi
            await CRA.registrazioneDispositivoIoT(idA, CIDA, helperDataA);
            await CRA.registrazioneDispositivoIoT(idB, CIDB, helperDataB);

            // Informazioni server
            const addressB ="127.0.0.1:3007";
            const NInitA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSA = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const NSB = "CSWBMs9ozHO01Z9JxDJXcYb4q3OH20VENs3I8Q==";
            const riferimentoAutenticazione = "c88828f91926cb8c6b97d37a566fa67f1b96c80bee0708c8fa6466de53859f97dcfa2e8f0e3792701f7036a2fe53d6638bc53ae77d430690f0be78d4856505a4";

            // Autenticazione
            await CRA.avviaAutenticazione(idA, riferimentoAutenticazione, addressB, NInitA, NSA, NSB);

            // Completamento autenticazione
            await CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, true);
            console.log("csc")
            await CRA.completaAutenticazioneServer(idA, riferimentoAutenticazione, false);

            // Controlla lo stato dell'autenticazione
            const result = await CRA.autenticazioneStabilita(idA, riferimentoAutenticazione);

            expect(result).to.equal(true);
        });

    });

});
